<?php

/**
 * @file
 * Code for the Playbox Global Settings module.
 */

/*
 * Implements hook_init()
 */
function playbox_admin_init() {
  global $user;
  $user = user_load($user->uid);
  
  // Load CSS
  $playbox_admin_color = _get_field($user->field_color);
  if(empty($playbox_admin_color)) $playbox_admin_color = variable_get('playbox_admin_color');
  $colors = _playbox_admin_get_colors();
  
  $playbox_admin_disco = _get_field($user->field_disco);
  if(empty($playbox_admin_disco)) $playbox_admin_disco = variable_get('playbox_admin_disco');
  
  // ternary operator syntax
  $css_file = (isset($playbox_admin_color)) ? $playbox_admin_color : 'cerulean';
  // in regular ole if/then/else
  /*
  if (isset($playbox_admin_color)) {
    $css_file = $playbox_admin_color;
  }
  else {
    $css_file = 'cerulean';
  }
  */
  if($playbox_admin_disco == 1){
    $css_file = array_rand($colors);
  }
  drupal_add_css(drupal_get_path('module', 'playbox_admin') . '/css/' . $css_file . '.css');
}

/*
 * Implements hook_menu()
 */
function playbox_admin_menu() {
  $items['admin/config/playbox'] = array(
    'title' => 'Playbox',
    'position' => 'left',
    'weight' => 200,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer site configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  $items['admin/config/playbox/global-settings'] = array(
    'title' => 'Global Settings',
    'description' => t('Configure global settings for Playbox'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playbox_admin_form'),
    'access arguments' => array('administer playbox global settings'),
  );
  
  $items['admin/config/playbox/user-settings'] = array(
    'title' => 'User Settings',
    'description' => t('Configure user settings for Playbox'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('playbox_user_form'),
    'access arguments' => array('change user playbox settings'),
    'access callback' => TRUE,
  );

  return $items;
}

/*
 * Implements hook_views_default_views_alter()
 */
function playbox_admin_views_pre_view(&$view) {

  if ($view->name == 'playbox_presidents' || $view->name == 'playbox_robots') {
    //Get information about the current user on their favorite president and robot
    global $user;
    $user = user_load($user->uid);
    
    $playbox_fav_president = _get_field($user->field_favorite_president, array('return' => 'target_id'));
    if(empty($playbox_fav_president)){
      //use default favorite president
      $playbox_fav_president_var = variable_get('playbox_admin_president');
      if(!empty($playbox_fav_president_var)){
        $playbox_fav_president = $playbox_fav_president['entity_id'];
      }
    }
    $playbox_admin_president_nid = $playbox_fav_president;
    
    $playbox_fav_robot = _get_field($user->field_favorite_robot, array('return' => 'target_id'));
    if(empty($playbox_fav_robot)){
      //use default favorite robot
      $playbox_fav_robot_var = variable_get('playbox_admin_boss');
      if(!empty($playbox_fav_robot_var)){
        $playbox_fav_robot = $playbox_fav_robot['entity_id'];
      }
    }
    $playbox_admin_boss_nid = $playbox_fav_robot;

    //Filter views using favorite president and robot
    //Used on the top section of the presidents and robots pages
    if ($view->name == 'playbox_presidents') {
      if (!empty($playbox_admin_president_nid)) {
        /* Filter criterion: Content: Nid */
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['id'] = 'nid';
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['table'] = 'node';
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['field'] = 'nid';
        $view->display['playbox_president_header_1']->handler->options['filters']['nid']['value']['value'] = $playbox_admin_president_nid;
      }
    }
    if ($view->name == 'playbox_robots') {
      if (!empty($playbox_admin_boss_nid)) {
        /* Filter criterion: Content: Nid */
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['id'] = 'nid';
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['table'] = 'node';
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['field'] = 'nid';
        $view->display['playbox_robot_header_1']->handler->options['filters']['nid']['value']['value'] = $playbox_admin_boss_nid;
      }
    }
  }
}

/*
 * Implements hook_permission()
 */
function playbox_admin_permission() {
  return array(
    'administer playbox global settings' => array(
      'title' => t('Administer Playbox Global Settings'),
      'description' => t('Perform administration tasks for Playbox Global Settings'),
    ),
    'change user playbox settings' => array(
      'title' => t('Change User Playbox Settings'),
      'description' => t('Change settings for Playbox User Settings'),
    )
  );
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function playbox_admin_form_playbox_admin_form_alter(&$form, &$form_state, $form_id) {
  $form['playbox_admin_color']['#empty_option'] = t('Choose a color');
  $form['#submit'][] = 'playbox_admin_submit';
  $form['playbox_global_settings']['playbox_admin_president']['#attributes']['class'][] = 'form-control';
  $form['playbox_global_settings']['playbox_admin_boss']['#attributes']['class'][] = 'form-control';
}

/*
 * Helper function to return our colorz
 */
function _playbox_admin_get_colors() {
  $colors = array (
    'crimson' => 'crimson',
    'tangerine' => 'tangerine',
    'ochre' => 'ochre',
    'jade' => 'jade',
    'cerulean' => 'cerulean',
    'lavender' => 'lavender',
    'onyx' => 'onyx',
    'eggshell' => 'eggshell',
  );
  return $colors;
}

/*
 * Playbox admin form definition
 */
function playbox_admin_form($form, &$form_state) {
  $form['playbox_global_settings'] = array (
    '#type' => 'fieldset',
    '#title' => 'Change Playbox Settings',
    );

  $form['playbox_global_settings']['playbox_admin_president'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite president?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_president'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
      ),
    '#default_value' => variable_get('playbox_admin_president')
  );


  $form['playbox_global_settings']['playbox_admin_boss'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite boss?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_robot'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
    ),
    '#default_value' => variable_get('playbox_admin_boss'),
  );

  $form['playbox_global_settings']['playbox_admin_color'] = array(
    '#type' => 'select',
    '#title' => t('What is your favorite color?'),
    '#options' => _playbox_admin_get_colors(),
    '#empty_option' => 'Select a color',
    '#default_value' => variable_get('playbox_admin_color'),
    '#states' => array(
      // Hide the color select when disco mode is checked.
      'disabled' => array(
        ':input[name="playbox_admin_disco"]' => array('checked' => TRUE),
      ),
    ),
  );

  $form['playbox_global_settings']['playbox_admin_disco'] = array(
    '#type' => 'checkbox',
    '#title' => t('Put site into Disco Mode?'),
    '#default_value' => variable_get('playbox_admin_disco'),
  );

  $form = system_settings_form($form);
  return $form;
}

/*
 * Clears the theme cache when settings are changes
 */
function playbox_admin_submit($form, &$form_state) {
  if (variable_get('cache', 0)) {
    drupal_theme_rebuild();
  }
}

/*
 * Playbox admin form definition
 */
function playbox_user_form($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $user = user_load($uid);
  #dpm($user);
  
  $default = _get_field($user->field_favorite_president, array('return' => 'target_id'));
  if(empty($default)) $default = variable_get('playbox_admin_president');
  
  $form['field_favorite_president'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite president?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_president'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
      ),
    '#default_value' => $default
  );

  $default = _get_field($user->field_favorite_robot, array('return' => 'target_id'));
  if(empty($default)) $default = variable_get('playbox_admin_boss');
  
  $form['field_favorite_robot'] = array(
    '#type' => 'entityreference',
    '#title' => t('Who is your favorite robot?'),
    '#era_entity_type' => 'node',
    '#era_bundles' => array('playbox_robot'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15,
    ),
    '#default_value' => $default,
  );

  $default = _get_field($user->field_color);
  if(empty($default)) $default = variable_get('playbox_admin_color');
  
  $form['field_color'] = array(
    '#type' => 'select',
    '#title' => t('What is your favorite color?'),
    '#options' => _playbox_admin_get_colors(),
    '#empty_option' => 'Select a color',
    '#default_value' => $default,
    '#states' => array(
      // Hide the color select when disco mode is checked.
      'disabled' => array(
        ':input[name="field_disco"]' => array('checked' => TRUE),
      ),
    ),
  );

  $default = _get_field($user->field_disco);
  if(empty($default)) $default = variable_get('playbox_admin_disco');
  
  $form['field_disco'] = array(
    '#type' => 'checkbox',
    '#title' => t('Put site into Disco Mode?'),
    '#default_value' => $default,
  );

  $form = system_settings_form($form);
  return $form;
}

/*
 * Implements hook_form_FORM_ID_alter()
 */
function playbox_admin_form_playbox_user_form_alter(&$form, &$form_state, $form_id) {
  $form['field_color']['#empty_option'] = t('Choose a color');
  $form['#submit'][] = 'playbox_user_submit';
  $form['field_favorite_president']['#attributes']['class'][] = 'form-control';
  $form['field_favorite_robot']['#attributes']['class'][] = 'form-control';
}

/*
 * On submit of playbox_user form
 * Saves form data into user entity
 * Clears the theme cache when settings are changes
 */
function playbox_user_submit($form, &$form_state) {
  
  global $user;
  #dpm($form);
  #dpm($user);

  //make edits to user
  $text = $form['field_favorite_president']['#value'];
  preg_match('#\((.*?)\)#', $text, $match);
  $president = $match[1];
  
  $text = $form['field_favorite_robot']['#value'];
  preg_match('#\((.*?)\)#', $text, $match);
  $robot = $match[1];
  
  $edit = array(
    'field_favorite_president' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'target_id' => $president,
        ),
      ),
    ),
    'field_favorite_robot' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'target_id' => $robot,
        ),
      ),
    ),
    'field_color' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $form['field_color']['#value'],
        ),
      ),
    ),
    'field_disco' => array(
      LANGUAGE_NONE => array(
        0 => array(
          'value' => $form['field_disco']['#value'],
        ),
      ),
    ),
    
  );
  
  user_save($user, $edit);
}


/*
 * Custom print field function which can return the value for a single value field without markup
 * Does not work with multivalued fields
 */
function _get_field($field, $options = array()){
	$default_options = array(
		'lang' => 'en'//desired language defaults to 'en' then LANGUAGE_NONE
		,'return' => 'value'//return value, can specify others such as 'uri'
	);
	$options = array_merge($default_options, $options);
	$return = '';

	//if field is just a string value, use that
	if(is_string($field)){
		$return = $field;
	}

	//check if field is even valid
	elseif(is_array($field)){
		//check if field doesnt even have a language
		if(!empty($field[0])){
			if(!empty($field[0]['raw'])){
				$return = $field[0]['raw'][$options['return']];
			}else{
				$return = $field[0][$options['return']];
			}
		}
		//check if prefered language is available
		elseif(!empty($field[$options['lang']])){
			if(!empty($field[$options['lang']]['raw'])){
				$return = $field[$options['lang']]['raw'][$options['return']];
			}else{
				$return = $field[$options['lang']][0][$options['return']];
			}
		}
		//else default to LANGUAGE_NONE value
		else{
			//added just to handle field collections or data pulls with different langs than their parent. May screw things up
			if(!empty($field['en'])) $field[LANGUAGE_NONE] = $field['en'];
			if(!empty($field['spa'])) $field[LANGUAGE_NONE] = $field['spa'];


			if(!empty($field[LANGUAGE_NONE])){


				if(!empty($field[LANGUAGE_NONE]['raw'])){
					$return = $field[LANGUAGE_NONE][0]['raw'][$options['return']];
				}else{
					$return = $field[LANGUAGE_NONE][0][$options['return']];
				}
			}
		}
	}

	return $return;
}

